<%- include('../partials/header', { activePage: 'settings' }) %>

<div class="container-fluid py-4">
    <h1 class="h2 mb-4">Settings</h1>
    
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Application Configuration</h6>
            <button id="saveSettings" class="btn btn-primary">
                <i class="bi bi-save"></i> Save Changes
            </button>
        </div>
        <div class="card-body">
            <div id="restartAlert" class="alert alert-warning alert-dismissible fade d-none" role="alert">
                <strong>Settings saved!</strong> The server will restart automatically to apply changes. This page will reload in a few seconds.
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            
            <form id="settingsForm">
                <ul class="nav nav-tabs" id="settingsTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="server-tab" data-bs-toggle="tab" data-bs-target="#server" type="button" role="tab" aria-controls="server" aria-selected="true">Server</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="business-tab" data-bs-toggle="tab" data-bs-target="#business" type="button" role="tab" aria-controls="business" aria-selected="false">Business Rules</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="scheduling-tab" data-bs-toggle="tab" data-bs-target="#scheduling" type="button" role="tab" aria-controls="scheduling" aria-selected="false">Scheduling</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="api-tab" data-bs-toggle="tab" data-bs-target="#api" type="button" role="tab" aria-controls="api" aria-selected="false">API Connections</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="stores-tab" data-bs-toggle="tab" data-bs-target="#stores" type="button" role="tab" aria-controls="stores" aria-selected="false">AutoDS Stores</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="email-tab" data-bs-toggle="tab" data-bs-target="#email" type="button" role="tab" aria-controls="email" aria-selected="false">Email</button>
                    </li>
                </ul>
                
                <div class="tab-content p-4" id="settingsTabContent">
                    <!-- Server Settings -->
                    <div class="tab-pane fade show active" id="server" role="tabpanel" aria-labelledby="server-tab">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="PORT" class="form-label">HTTP Port</label>
                                <input type="number" class="form-control" id="PORT" name="PORT" value="<%= settings.server.PORT || '3000' %>" required>
                                <div class="form-text">The port the server will run on.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="LOG_LEVEL" class="form-label">Log Level</label>
                                <select class="form-select" id="LOG_LEVEL" name="LOG_LEVEL">
                                    <option value="error" <%= settings.server.LOG_LEVEL === 'error' ? 'selected' : '' %>>Error</option>
                                    <option value="warn" <%= settings.server.LOG_LEVEL === 'warn' ? 'selected' : '' %>>Warning</option>
                                    <option value="info" <%= settings.server.LOG_LEVEL === 'info' ? 'selected' : '' %>>Info</option>
                                    <option value="debug" <%= settings.server.LOG_LEVEL === 'debug' ? 'selected' : '' %>>Debug</option>
                                </select>
                                <div class="form-text">Determines what type of messages are logged.</div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Business Settings -->
                    <div class="tab-pane fade" id="business" role="tabpanel" aria-labelledby="business-tab">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="DEFAULT_MARKUP" class="form-label">Default Markup</label>
                                <input type="number" step="0.01" class="form-control" id="DEFAULT_MARKUP" name="DEFAULT_MARKUP" value="<%= settings.business.DEFAULT_MARKUP || '1.3' %>">
                                <div class="form-text">Multiplier applied to product cost (e.g., 1.3 = 30% markup).</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="MINIMUM_MARGIN" class="form-label">Minimum Margin</label>
                                <input type="number" step="0.01" class="form-control" id="MINIMUM_MARGIN" name="MINIMUM_MARGIN" value="<%= settings.business.MINIMUM_MARGIN || '0.2' %>">
                                <div class="form-text">Minimum profit margin required for product listing (e.g., 0.2 = 20%).</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="MINIMUM_STOCK" class="form-label">Minimum Stock</label>
                                <input type="number" class="form-control" id="MINIMUM_STOCK" name="MINIMUM_STOCK" value="<%= settings.business.MINIMUM_STOCK || '1' %>">
                                <div class="form-text">Minimum stock level required for product listing.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="MAX_LISTING_QUANTITY" class="form-label">Max Listing Quantity</label>
                                <input type="number" class="form-control" id="MAX_LISTING_QUANTITY" name="MAX_LISTING_QUANTITY" value="<%= settings.business.MAX_LISTING_QUANTITY || '10' %>">
                                <div class="form-text">Number of products to import from marketplace in each run.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="SUPPLIER_FILTER" class="form-label">Supplier Filter</label>
                                <select class="form-select" id="SUPPLIER_FILTER" name="SUPPLIER_FILTER">
                                    <option value="" <%= !settings.business.SUPPLIER_FILTER ? 'selected' : '' %>>No filter (all suppliers)</option>
                                    <option value="amazon" <%= settings.business.SUPPLIER_FILTER === 'amazon' ? 'selected' : '' %>>Amazon</option>
                                    <option value="private_suppliers" <%= settings.business.SUPPLIER_FILTER === 'private_suppliers' ? 'selected' : '' %>>AutoDS Suppliers</option>
                                </select>
                                <div class="form-text">Filter products by supplier when importing from marketplace.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="RESPONSE_TIME_HOURS" class="form-label">Response Time (Hours)</label>
                                <input type="number" class="form-control" id="RESPONSE_TIME_HOURS" name="RESPONSE_TIME_HOURS" value="<%= settings.business.RESPONSE_TIME_HOURS || '24' %>">
                                <div class="form-text">Target response time for customer messages in hours.</div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Scheduling Settings -->
                    <div class="tab-pane fade" id="scheduling" role="tabpanel" aria-labelledby="scheduling-tab">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="LISTING_CRON_SCHEDULE" class="form-label">Product Listing Schedule</label>
                                <input type="text" class="form-control" id="LISTING_CRON_SCHEDULE" name="LISTING_CRON_SCHEDULE" value="<%= settings.scheduling.LISTING_CRON_SCHEDULE || '0 9 * * *' %>">
                                <div class="form-text">Cron expression for when to run the listing job. Default: daily at 9 AM.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="REMOVAL_CRON_SCHEDULE" class="form-label">Product Removal Schedule</label>
                                <input type="text" class="form-control" id="REMOVAL_CRON_SCHEDULE" name="REMOVAL_CRON_SCHEDULE" value="<%= settings.scheduling.REMOVAL_CRON_SCHEDULE || '0 18 * * *' %>">
                                <div class="form-text">Cron expression for when to run the removal job. Default: daily at 6 PM.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="REMOVAL_COUNT" class="form-label">Number of Products to Remove</label>
                                <input type="number" class="form-control" id="REMOVAL_COUNT" name="REMOVAL_COUNT" value="<%= settings.scheduling.REMOVAL_COUNT || '5' %>">
                                <div class="form-text">Number of most recently added products to remove each time the removal job runs.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="MESSAGE_CRON_SCHEDULE" class="form-label">Message Check Schedule</label>
                                <input type="text" class="form-control" id="MESSAGE_CRON_SCHEDULE" name="MESSAGE_CRON_SCHEDULE" value="<%= settings.scheduling.MESSAGE_CRON_SCHEDULE || '0 * * * *' %>">
                                <div class="form-text">Cron expression for when to check for new messages. Default: hourly.</div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- API Settings -->
                    <div class="tab-pane fade" id="api" role="tabpanel" aria-labelledby="api-tab">
                        <h5 class="mb-3">eBay API Settings</h5>
                        <div class="row">
                            <!-- <div class="col-md-6 mb-3">
                                <label for="EBAY_API_URL" class="form-label">eBay API URL</label>
                                <input type="text" class="form-control" id="EBAY_API_URL" name="EBAY_API_URL" value="<%= settings.api.EBAY_API_URL || '' %>">
                                <div class="form-text">The eBay API endpoint URL.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="EBAY_CLIENT_ID" class="form-label">eBay Client ID</label>
                                <input type="text" class="form-control" id="EBAY_CLIENT_ID" name="EBAY_CLIENT_ID" value="<%= settings.api.EBAY_CLIENT_ID || '' %>">
                                <div class="form-text">Your eBay API client ID.</div>
                            </div> -->
                            <div class="col-md-6 mb-3">
                                <label for="EBAY_USERNAME" class="form-label">eBay Username</label>
                                <input type="text" class="form-control" id="EBAY_USERNAME" name="EBAY_USERNAME" value="<%= settings.api.EBAY_USERNAME || '' %>">
                                <div class="form-text">Your eBay account username.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="EBAY_PASSWORD" class="form-label">eBay Password</label>
                                <input type="text" class="form-control" id="EBAY_PASSWORD" name="EBAY_PASSWORD" placeholder="password" value="<%= settings.api.EBAY_PASSWORD || '' %>">
                                <div class="form-text">Your eBay account password.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="EBAY_FULFILLMENT_POLICY_ID" class="form-label">Fulfillment Policy ID</label>
                                <input type="text" class="form-control" id="EBAY_FULFILLMENT_POLICY_ID" name="EBAY_FULFILLMENT_POLICY_ID" value="<%= settings.api.EBAY_FULFILLMENT_POLICY_ID || '' %>">
                                <div class="form-text">Your eBay fulfillment policy ID.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="EBAY_PAYMENT_POLICY_ID" class="form-label">Payment Policy ID</label>
                                <input type="text" class="form-control" id="EBAY_PAYMENT_POLICY_ID" name="EBAY_PAYMENT_POLICY_ID" value="<%= settings.api.EBAY_PAYMENT_POLICY_ID || '' %>">
                                <div class="form-text">Your eBay payment policy ID.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="EBAY_RETURN_POLICY_ID" class="form-label">Return Policy ID</label>
                                <input type="text" class="form-control" id="EBAY_RETURN_POLICY_ID" name="EBAY_RETURN_POLICY_ID" value="<%= settings.api.EBAY_RETURN_POLICY_ID || '' %>">
                                <div class="form-text">Your eBay return policy ID.</div>
                            </div>
                        </div>
                        
                        <h5 class="mb-3 mt-4">AutoDS Settings</h5>
                        <div class="row">
                            <!-- <div class="col-md-6 mb-3">
                                <label for="AUTODS_API_URL" class="form-label">AutoDS API URL</label>
                                <input type="text" class="form-control" id="AUTODS_API_URL" name="AUTODS_API_URL" value="<%= settings.api.AUTODS_API_URL || '' %>">
                                <div class="form-text">The AutoDS API endpoint URL.</div>
                            </div> -->
                            <div class="col-md-6 mb-3">
                                <label for="AUTODS_STORE_IDS" class="form-label">AutoDS Store IDs</label>
                                <input type="text" class="form-control" id="AUTODS_STORE_IDS" name="AUTODS_STORE_IDS" value="<%= settings.api.AUTODS_STORE_IDS || '' %>">
                                <div class="form-text">Comma-separated list of AutoDS store IDs to monitor.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="AUTODS_USERNAME" class="form-label">AutoDS Username</label>
                                <input type="text" class="form-control" id="AUTODS_USERNAME" name="AUTODS_USERNAME" value="<%= settings.api.AUTODS_USERNAME || '' %>">
                                <div class="form-text">Your AutoDS account username.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="AUTODS_PASSWORD" class="form-label">AutoDS Password</label>
                                <input type="text" class="form-control" id="AUTODS_PASSWORD" name="AUTODS_PASSWORD" placeholder="password" value="<%= settings.api.AUTODS_PASSWORD || '' %>">
                                <div class="form-text">Your AutoDS account password.</div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Stores Settings -->
                    <div class="tab-pane fade" id="stores" role="tabpanel" aria-labelledby="stores-tab">
                        <div class="row mb-4">
                            <div class="col-12">
                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle"></i> This tab shows your connected AutoDS stores. You can copy the Store ID and use it in the API Connections tab.
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-12">
                                <div class="card shadow mb-4">
                                    <div class="card-header py-3 d-flex justify-content-between align-items-center">
                                        <h6 class="m-0 font-weight-bold text-primary">Store List</h6>
                                        <button id="refreshStores" class="btn btn-outline-primary btn-sm">
                                            <i class="bi bi-arrow-clockwise"></i> Refresh
                                        </button>
                                    </div>
                                    <div class="card-body">
                                        <div id="storeListLoading" class="text-center py-4 d-none">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                            <p class="mt-2">Loading stores...</p>
                                        </div>
                                        <div id="storeListError" class="alert alert-danger d-none" role="alert">
                                            <i class="bi bi-exclamation-triangle"></i> 
                                            <span id="storeListErrorMessage">Failed to load stores.</span>
                                        </div>
                                        <div id="storeListEmpty" class="alert alert-warning d-none" role="alert">
                                            <i class="bi bi-exclamation-circle"></i> No stores found.
                                        </div>
                                        <div class="table-responsive">
                                            <table id="storeListTable" class="table table-bordered table-hover">
                                                <thead>
                                                    <tr>
                                                        <th>Store ID</th>
                                                        <th>Name</th>
                                                        <!-- <th>Type</th>
                                                        <th>URL</th> -->
                                                        <th>Listings</th>
                                                        <th>Status</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <!-- Store data will be populated here -->
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Email Settings -->
                    <div class="tab-pane fade" id="email" role="tabpanel" aria-labelledby="email-tab">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="EMAIL_ENABLED" class="form-label">Email Notifications</label>
                                <select class="form-select" id="EMAIL_ENABLED" name="EMAIL_ENABLED">
                                    <option value="true" <%= settings.email.EMAIL_ENABLED === 'true' ? 'selected' : '' %>>Enabled</option>
                                    <option value="false" <%= settings.email.EMAIL_ENABLED === 'false' ? 'selected' : '' %>>Disabled</option>
                                </select>
                                <div class="form-text">Enable or disable email notifications.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="EMAIL_HOST" class="form-label">SMTP Host</label>
                                <input type="text" class="form-control" id="EMAIL_HOST" name="EMAIL_HOST" value="<%= settings.email.EMAIL_HOST || '' %>">
                                <div class="form-text">SMTP server host for sending emails.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="EMAIL_PORT" class="form-label">SMTP Port</label>
                                <input type="number" class="form-control" id="EMAIL_PORT" name="EMAIL_PORT" value="<%= settings.email.EMAIL_PORT || '587' %>">
                                <div class="form-text">SMTP server port for sending emails.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="ADMIN_EMAILS" class="form-label">Admin Email Addresses</label>
                                <input type="text" class="form-control" id="ADMIN_EMAILS" name="ADMIN_EMAILS" value="<%= settings.email.ADMIN_EMAILS || '' %>">
                                <div class="form-text">Comma-separated list of email addresses to receive notifications.</div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const saveButton = document.getElementById('saveSettings');
        const form = document.getElementById('settingsForm');
        const restartAlert = document.getElementById('restartAlert');
        
        // Handle form submission
        saveButton.addEventListener('click', async function(e) {
            e.preventDefault();
            
            // Collect form data
            const formData = new FormData(form);
            const settings = {};
            
            for (const [key, value] of formData.entries()) {
                settings[key] = value;
            }
            
            // Show loading state
            saveButton.disabled = true;
            saveButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
            
            try {
                // Use direct endpoint to avoid middleware conflicts
                const response = await fetch('/direct-settings-update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams(settings)
                }).then(res => res.json());
                
                if (response.success) {
                    // Show restart alert
                    restartAlert.classList.remove('d-none');
                    restartAlert.classList.add('show');
                    
                    // Reload the page after a delay to reconnect to restarted server
                    setTimeout(() => {
                        window.location.reload();
                    }, 8000); // Give server time to restart (8 seconds)
                    
                    showToast('Settings saved successfully. Server will restart.', 'success');
                } else {
                    showToast(`Failed to save settings: ${response.error}`, 'error');
                    
                    // Reset button
                    saveButton.disabled = false;
                    saveButton.innerHTML = '<i class="bi bi-save"></i> Save Changes';
                }
            } catch (error) {
                showToast(`Error saving settings: ${error.message}`, 'error');
                
                // Reset button
                saveButton.disabled = false;
                saveButton.innerHTML = '<i class="bi bi-save"></i> Save Changes';
            }
        });
    });
</script>

<!-- Store list handling -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Load stores when the stores tab is clicked
        const storesTab = document.getElementById('stores-tab');
        if (storesTab) {
            storesTab.addEventListener('click', function() {
                loadStoreList();
            });
        }
        
        // Refresh button click event
        const refreshStoresBtn = document.getElementById('refreshStores');
        if (refreshStoresBtn) {
            refreshStoresBtn.addEventListener('click', function() {
                loadStoreList();
            });
        }
        
        // Function to load store list
        function loadStoreList() {
            const loadingEl = document.getElementById('storeListLoading');
            const errorEl = document.getElementById('storeListError');
            const emptyEl = document.getElementById('storeListEmpty');
            const tableEl = document.getElementById('storeListTable');
            const tableBody = tableEl.querySelector('tbody');
            
            // Show loading, hide other states
            loadingEl.classList.remove('d-none');
            errorEl.classList.add('d-none');
            emptyEl.classList.add('d-none');
            
            // Fetch store list from API
            fetch('/autods/stores')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch store list');
                    }
                    return response.json();
                })
                .then(data => {
                    // Hide loading
                    loadingEl.classList.add('d-none');
                    
                    // Check if stores exist
                    if (!data.stores || data.stores.length === 0) {
                        emptyEl.classList.remove('d-none');
                        return;
                    }
                    
                    // Clear existing table rows
                    tableBody.innerHTML = '';
                    
                    // Add rows for each store
                    data.stores.forEach(storeData => {
                        const store = storeData.store || {};
                        
                        const row = document.createElement('tr');
                        
                        // Store ID cell with copy button
                        const idCell = document.createElement('td');
                        const idWrapper = document.createElement('div');
                        idWrapper.className = 'd-flex align-items-center';
                        
                        const idText = document.createElement('span');
                        idText.textContent = store.id || 'N/A';
                        idText.className = 'me-2';
                        
                        const copyBtn = document.createElement('button');
                        copyBtn.className = 'btn btn-sm btn-outline-secondary';
                        copyBtn.innerHTML = '<i class="bi bi-clipboard"></i>';
                        copyBtn.title = 'Copy Store ID';
                        copyBtn.addEventListener('click', function() {
                            navigator.clipboard.writeText(store.id)
                                .then(() => {
                                    copyBtn.innerHTML = '<i class="bi bi-check"></i>';
                                    setTimeout(() => {
                                        copyBtn.innerHTML = '<i class="bi bi-clipboard"></i>';
                                    }, 1500);
                                });
                        });
                        
                        idWrapper.appendChild(idText);
                        idWrapper.appendChild(copyBtn);
                        idCell.appendChild(idWrapper);
                        row.appendChild(idCell);
                        
                        // Name cell
                        const nameCell = document.createElement('td');
                        nameCell.textContent = store.name || 'N/A';
                        row.appendChild(nameCell);
                        
                        // Store type cell
                        // const typeCell = document.createElement('td');
                        // const storeTypes = {
                        //     1: 'eBay',
                        //     2: 'Amazon',
                        //     3: 'Walmart',
                        //     4: 'Shopify',
                        //     5: 'WooCommerce',
                        //     6: 'Wix',
                        //     7: 'Facebook',
                        //     8: 'TikTok'
                        // };
                        // typeCell.textContent = storeTypes[store.store_type] || 'Unknown';
                        // row.appendChild(typeCell);
                        
                        // URL cell
                        // const urlCell = document.createElement('td');
                        // if (store.store_url) {
                        //     const urlLink = document.createElement('a');
                        //     urlLink.href = store.store_url;
                        //     urlLink.target = '_blank';
                        //     urlLink.textContent = store.store_url;
                        //     urlCell.appendChild(urlLink);
                        // } else {
                        //     urlCell.textContent = 'N/A';
                        // }
                        // row.appendChild(urlCell);
                        
                        // Listings count cell
                        const listingsCell = document.createElement('td');
                        listingsCell.textContent = storeData.total_listings_count || '0';
                        row.appendChild(listingsCell);
                        
                        // Status cell
                        const statusCell = document.createElement('td');
                        const statusBadge = document.createElement('span');
                        statusBadge.className = store.active ? 'badge bg-success' : 'badge bg-danger';
                        statusBadge.textContent = store.active ? 'Active' : 'Inactive';
                        statusCell.appendChild(statusBadge);
                        row.appendChild(statusCell);
                        
                        // Add row to table
                        tableBody.appendChild(row);
                    });
                })
                .catch(error => {
                    // Show error
                    loadingEl.classList.add('d-none');
                    errorEl.classList.remove('d-none');
                    document.getElementById('storeListErrorMessage').textContent = error.message || 'Failed to load stores.';
                    console.error('Error loading stores:', error);
                });
        }
    });
</script>

<%- include('../partials/footer') %> 